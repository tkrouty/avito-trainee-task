from typing import Dict

import bson
from fastapi import APIRouter, Depends
from fastapi.responses import JSONResponse
from motor.motor_asyncio import AsyncIOMotorDatabase

from . import crud
from . import models
from .db import get_db
from .encryption import hash_passphrase


router = APIRouter()


@router.post('/generate', status_code=201)
async def generate(secret: models.Secret,
                   db: AsyncIOMotorDatabase = Depends(get_db)
                   ) -> Dict[str, str]:
    """Validates a request and creates a Secret document in the database.
    Returns a key that is a document's id generated by Mongo.

    Request's body is expected to have the following fields:
    'content': string, -- content of a secret to store
    'passphrase': string, -- a phrase that will be used to get the secret
    'delete_after_minutes': integer/float -- desired lifetime in minutes.
    """
    key = await crud.insert_one_secret(db, secret)

    return {"secret_key": key}


@router.get(
    '/secrets/{secret_key}',
    responses={
        404: {"content": {}, "description": "Key not found"},
        403: {"content": {}, "description": "Wrong passphrase"}
    }
)
async def get_secret(secret_key: str, passphrase: str,
                     db: AsyncIOMotorDatabase = Depends(get_db)):
    """Validates a request and returns contents of a secret if secret key and
    passphrase are correct.

    Secret key is received from url and passphrase is expected to be
    in a query string as a "passphrase" parameter.

    NB! It is possible that secret's lifetime already expired but the doc is
    still in DB, because Mongo deletes expired docs only once per minute.
    In this case the server will return a 404 status code.
    """
    try:
        secret = await crud.find_secret_by_id(db, secret_key)
    except bson.errors.InvalidId:
        return JSONResponse(
            status_code=404,
            content={"Message": "Sorry, this can't be a valid key"}
        )

    if secret is None:
        return JSONResponse(
            status_code=404,
            content={"Message": "Sorry, your secret key is not registered"}
        )
    hashed_passphrase = hash_passphrase(passphrase)
    if hashed_passphrase != secret["passphrase"]:
        return JSONResponse(
            status_code=403,
            content={"Message": "Sorry, wrong passphrase"}
        )

    return {"secret": secret["content"]}
